#define DBL_MAX_VAL 1.79769e+308

#include "vdc.h"
#include <stdio.h>
#include <stdlib.h>

/* ====================================================================== */
/*! \fn pnode AllocNode(int n)
    \param n : nombre de villes
    \return pointeur sur le noeud alloué
    \brief alloue un nouveau noeud
*/
pnode AllocNode(int n) 
{
	pnode res = (pnode)malloc(sizeof(node));
	res->n = n;
	return res;
}

/* ====================================================================== */
/*! \fn pnode ExtractFirstOpen(pnode & Open)
    \param Open : liste des noeuds "ouverts"
    \return pointeur sur le noeud choisi
    \brief sélectionne un noeud qui minimise la quantité estim_f, le retire de la liste Open et retourne un pointeur dessus
*/
pnode ExtractFirstOpen(pnode* Open) 
{
    pnode res;
    if(*Open == NULL)	res = NULL;
    else if((*Open)->next == NULL) 
    {
    	res = *Open;
 	*Open = NULL;
    }
    else 
    {
    	double min_estim_f = (*Open)->estim_f;
    	pnode* tmp = Open;
    	pnode* ptmp;
    	pnode* pres;
    	while((*tmp)->next != NULL) 
        {
    		ptmp = tmp;
    		tmp = &((*tmp)->next);
    		if((*tmp)->estim_f < min_estim_f) 
		{
    			min_estim_f = (*tmp)->estim_f;
    			pres = ptmp;
    			res = *tmp; 
    		}
    	}
	if((*pres)!=NULL) (*pres)->next = res->next;	
    }
    return res;
}

/* ====================================================================== */
/*! \fn void PrintSolution(pnode p, double *arc)
    \param p : pointeur sur le noeud sélectionné à la profondeur n-1
    \param arc : table des distances entre villes
    \brief affiche la solution à l'écran (le circuit et son coût)
*/

/* ====================================================================== */
/*! \fn int NotInListSom(int s, pnode p)
    \param p : un noeud
    \brief teste si s est absent de la liste de sommets du noeud p
*/

/* ====================================================================== */
/*! \fn pnode DevelopNode(pnode p, double *arc)
    \param p : un noeud
    \param arc : table des distances entre villes
    \return la liste des nouveaux noeuds créés
    \brief construit la liste des noeuds successeurs sur noeud p dans le GRP
*/
pnode DevelopNode(pnode p, double *arc)
{   
 
    return ListeNoeuds;
}

/* ====================================================================== */
/*! \fn pnode Catenate(pnode p, pnode q)
    \param p, q : listes de noeuds
    \return pointeur sur la liste résultat
    \brief concatène les listes p et q (physiquement), et retourne le pointeur sur la nouvelle liste
*/
pnode Catenate(pnode p, pnode q)
{
    if(p == NULL) return q;
    else 
    {
    	pnode tmp = p;
    	while(tmp->next != NULL) tmp = tmp->next;
    	tmp->next = q;
    	return p;
    }
}

/* ====================================================================== */
/*! \fn double ComputeH(pnode p, double *arc, int code, int *rest) 
    \param p : un noeud
    \param arc : table des distances entre villes
    \param code : le code de l'heuristique (choix parmi différentes possibilités)
    \param rest : tableau contenant les index des p->n - p->len villes à visiter
    \return : valeur de l'heuristique pour ce noeud
    \brief calcule l'heuristique pour le noeud p
*/
double ComputeH(pnode p, double *arc, int code, int *rest)
{
    
    return heur;
}

/* ====================================================================== */
/*! \fn void AStar(int n, double *arc, int code)
    \param n : nombre de villes
    \param arc : table des distances entre villes
    \param code : le code de l'heuristique (choix parmi différentes possibilités)
    \brief algorithme A* pour le voyageur de commerce
*/
void AStar(int n, double *cost, int code)
{
   //declaration des listes OUVERT et FERME
    pnode p = AllocNode(n);
    pnode OUVERT = NULL;
    pnode FERME = NULL;       
    Catenate(OPEN, (p)node d);   
    while()
    {
	if(OPEN!=NULL) 
	{
	    return qqch
	    ExtractFirstOpen(node,OPEN);
	    FERME = Catenate(FERME, node);
	}
	if(n==but)
	{ 
	    return qqchlol
	    listeNoeuds = DevelopNode(pnode n, double *cost)
	}
    }
}

/* ====================================================================== */
/*! \fn double tailleGRP(int n)
    \param n : nombre de villes
    \return : taille du GRP pour n villes
    \brief estime la taille du GRP pour n villes
*/
double tailleGRP(int n)
{
    int i=0;
    double tailleTotale=1;        // 1: premier sommet (source)
    double tmp;               
    while(i!=n)
    {       
        tmp = (n-i)*(n-i);
        tailleTotale = tailleTotale + tmp;
        i++;
    }
    return tailleTotale;
}

/* ====================================================================== */
int main(int argc, char **argv)
/* ====================================================================== */
{
	
	if (argc != 2) 
    {
	printf("Attendu -> ./heur1 N\n");
	printf("avec N = nb de postes = nb d'agents\n");
	return 0;
    }
    else 
    {
	//int N = 3;
	int N = strtol(argv[1], NULL, 10);	
	int i;
	
	pnode d = AllocNode(N);
	d->estim_g = 0.0;
	d->n = N;
	d->estim_f = d->estim_g + ComputeH(d, C, 1);
	
	d->next = DevelopNode(d, C);
	
	return 0;
    }

} // main()
